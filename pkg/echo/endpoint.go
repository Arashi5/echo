// Code generated by gitlab.lenvendo.ru/product/grade-factor/services/service-generator  REMOVE THIS STRING ON EDIT OR DO NOT EDIT.
//go:generate easyjson -all endpoint.go
package echo

import (
	"context"

	"github.com/go-kit/kit/endpoint"
	_ "github.com/mailru/easyjson/gen"
)

//easyjson:json
type CreateEchoRequest struct {
	Data *Echo `json:"data"`
}

//easyjson:json
type CreateEchoResponse struct {
	Id uint32 `json:"id"`
}

//easyjson:json
type Echo struct {
	Id       uint32 `json:"id"`
	Title    string `json:"title"`
	Reminder string `json:"reminder"`
}

//easyjson:json
type GetEchoListRequest struct {
}

//easyjson:json
type GetEchoListResponse []Echo

//easyjson:skip
type endpoints struct {
	CreateEchoEndpoint endpoint.Endpoint
	GetEchoEndpoint    endpoint.Endpoint
}

func (e endpoints) CreateEcho(ctx context.Context, req *CreateEchoRequest) (resp *CreateEchoResponse, err error) {
	response, err := e.CreateEchoEndpoint(ctx, req)
	if err != nil {
		return nil, err
	}
	r := response.(CreateEchoResponse)
	return &r, err
}

func (e endpoints) GetEcho(ctx context.Context, req *GetEchoListRequest) (resp *GetEchoListResponse, err error) {
	response, err := e.GetEchoEndpoint(ctx, req)
	if err != nil {
		return nil, err
	}
	r := response.(GetEchoListResponse)
	return &r, err
}

func makeCreateEchoEndpoint(s Service) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		req := request.(CreateEchoRequest)
		return s.CreateEcho(ctx, &req)
	}
}

func makeGetEchoEndpoint(s Service) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		req := request.(GetEchoListRequest)
		return s.GetEcho(ctx, &req)
	}
}
